<?php

require_once("BaseModxWebUsers.php");
require_once("ModxWebUserAttributes.php");
require_once("ModxUserextend.php");

//require_once("flexiphp/base/FlexiAdminGroup/models/ModxWebGroups.php");
require_once(dirname(__FILE__) . "/../../FlexiAdminGroup/models/ModxWebGroups.php");

/**
 * ModxWebUsers
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class ModxWebUsers extends BaseModxWebUsers
{
  public function postValidate()
	{
    if (empty($this->username)) {
      $this->getErrorStack()->add("username", "notnull");
    }
    else {
      $oQuery = FlexiModelUtil::getDBQuery("ModxWebUsers")->where("username=?", array($this->username));
      if (! empty($this->id)) {
        $oQuery->addWhere("id<>?", array($this->id));
      }
      //echo $oQuery->getSQLQuery();
      //echo var_dump($this->username);
      $oResult = $oQuery->fetchOne();
      if ($oResult !== false ){
        $this->getErrorStack()->add("username", "duplicate");
      }
    }

    if (empty($this->password)) {
      $this->getErrorStack()->add("password", "notnull");
    }
    
	}

  public function preDelete() {

//    if (!empty ($this->Attributes)) {
//      $this->Attributes->delete();
//    } else {
//      echo "id: " . $this->id;
//      die("attribute not found");
//    }
//
//    if (!empty ($this->Groups)) {
//      foreach( $this->Groups as & $oGroup) {
//        $oGroup->delete();
//      }
//    }
    
  }

  public function preSave() {
    $this->Extend->verifycode = FlexiStringUtil::createRandomPassword(10);
    $this->Extend->verified = 0;
  }

  public function setUp()
	{
		$this->hasOne('ModxWebUserAttributes as Attributes', array(
			'local' => 'id',
			'foreign' => 'internalKey',
      'onDelete' => 'CASCADE',
      'onUpdate' => 'CASCADE',
      'cascade' => array('delete')
			)
		);

    $this->hasMany('ModxWebGroups as Groups', array(
			'local' => 'id',
			'foreign' => 'webuser',
      'onDelete' => 'CASCADE',
      'onUpdate' => 'CASCADE',
      'cascade' => array('delete')
			)
		);
		
		$this->hasOne('ModxUserextend as Extend', array(
			'local' => 'id',
			'foreign' => 'userid',
      'onDelete' => 'CASCADE',
      'onUpdate' => 'CASCADE',
      'cascade' => array('delete')
			)
		);

  }
}
